Pro Puppet:

is ruby based, licensed under GPLv2

Manages hosts throughout their lifecycle:
  - initial build and installation
  - upgrades
  - maintencance
  - End of life
  
Puppet Model:
  - Deployment
  - Configuration Language and Resource abstraction layer
  - Transaction layer

Deployment:
Puppet agent/client connect to Puppet master/server/daemon using SSL and completes a "Puppet Configuration Run". You can set the puppet agent to connect to the master using Cron. Puppet agents connect to master every 30 minutes by default.

Resource Abstraction Layer:
Puppet uses Declaritive language for configuring puppet agents (Tell puppet what to do, not how). For example, the following insures vim will be installed regardless of Operating System:

package { "vim":
    ensure => present,
}

type { "title":
	attribute => value,
}

Each type has a number of "providers" (package type has Yum, Apt, pkgadd, etc..) The provider is determined by "Facter" tool, which contains facts about system (hostname, ip address, OS, version, etc..).

NOTE: If a configuration has not been changed, Puppet will not make a puppet run.

Transaction Layer:
This is the puppet engine that takes the configuration from RAL and compiles it. It then communicates compiled information to agent. The agent applies these configurations and reports status back to master.

[ master ] -- compile puppet configuration, send to host --> [host]
[ host ] -- applies configuration on self, reports back to master --> [ master ] 

Puppet is Idempotent, applying the same configuration to a puppet-agent multiple times will not change the agents configuration.

Mixing releases of Puppet:
Master needs to be newer version than agent. Not recommended as newer versions of puppet use a REST interface (rather than an older XML-RPC transport layer).

Installing on RHEL/CENTOS:
Prerequisites:
# yum update
# yum install ruby ruby-libs ruby-shadow

You will need to add the EPEL (Extra Packages for Enterprise Linux) repository to the hosts. You can do so with the following:
$ su -c 'rpm -Uvh http://download.fedoraproject.org/pub/epel/7/x86_64/e/epel-release-7-5.noarch.rpm'

NOTE: For more information on EPEL -> https://fedoraproject.org/wiki/EPEL/FAQ

On the master for RHEL
# yum install puppet puppet-server facter
For ubuntu/debian
# apt-get install puppet puppetmaster facter

On the agent
# yum install puppet facter


Configuration:
  - /etc/puppet/puppet.conf
  - If the configuration does not exist, you can generate one with the following:
    # puppetmasterd --genconfig > puppet.conf
	
In puppet.conf, place the following under [master] section:
[master]
certname=<fully qualified domain name of puppet-master>

The above directive addresses a SSL bug found in ruby. For more information:
http://projects.puppetlabs.com/projects/puppet/wiki/Ruby_Ssl_2007_006

Add a CNAME to your "/etc/hosts" file. It is usually a good idea to add the CNAME "puppet" to your puppet master. This is because a puppet agent, when connecting to the master,
looks for a host named "puppet" in DNS, if the hostname of the master is not explicitly given on the command line.
127.0.0.1 localhost
<Host's IP> <Host's FQDN> puppet. 

Now would be a good time to brush up on DNS/BIND if you need to.

The site.pp manifest)
Puppet manifests are host configuration files ending in the ".pp" suffix. We need to add /etc/puppet/manifests/site.pp so puppet knows what configurations to load for its clients.
If this file is not present (Puppet cannot run without this file being present), simply use:

# touch /etc/puppet/manifests/site.pp

Firewall:

Puppet runs on TCP port 8140. Ensure your Netfilter firewall allows puppet access to the master.

-A INPUT -p tcp -m state --state NEW --dport 8140 -j ACCEPT     # access from anywhere
-A INPUT -p tcp -m state --state NEW --dport 8140 -s 192.168.0.0/24 # access from subnet

Starting the Puppet Daemon:
On RHEL/CentOS
# systemctl start puppetmaster.servic
# systemctl enable puppetmaster.service # Ensures puppet starts on boot
# systemctl status puppetmaster.service

On Ubuntu
# service puppetmaster start
# update-rc.d puppetmaster default # Ensures puppet starts on boot
# service puppetmaster status

On Ubuntu, Puppet keeps other neccessary files in "/var/lib/puppet/". For example, files used for SSL are kept in "/var/lib/puppet/ssl".
To find where puppet keeps your SSL files, use
$ grep ssldir /etc/puppet/puppet.conf

Starting Puppet:

Both a puppet agent, as well as a master are started using the same binary command. To start the master from the command line:
$ puppet master

To start a puppet agent:
$ puppet agent

It is sometimes useful to not daemonize puppet in order to troubleshoot issues. To start puppetmaster from the command line without making it a daemon:
$ puppet master --verbose --no-daemonize

See "puppet --help" for more information



TROUBLESHOOTING:
1) `systemctl status puppet` produces:
Could not request certificate: Connection refused - connect(2)

Verify that the puppet master is started (before the agent preferrably). 
$ systemctl start puppetmaster

The first time puppetmaster is started, it signs the following certs:
  - Signed certificate request for ca (So puppetmaster can act as CA for puppet agents)
  - The CA puppet master then signs any puppet agents you may have started waiting for a Puppet SSL Cert Request
  

Verify the SSL dir is where you think it is (print list of puppet environment variables):
$ puppet config print | less
$ puppet config print ssldir

2) SELinux 
